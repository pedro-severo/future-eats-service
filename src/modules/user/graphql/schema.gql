input LoginInput {
    email: String!
    password: String!
}

input SignupInput {
    name: String!
    email: String!
    cpf: String!
    password: String!
}

input RegisterAddressInput {
    userId: String!
    city: String!
    complement: String
    state: String!
    streetName: String!
    streetNumber: String!
    zone: String!
}

input GetProfileInput {
    userId: String!
}

type User {
    id: String!
    name: String!
    email: String!
    cpf: String!
    hasAddress: Boolean!
    password: String!
}

type UserResponse {
    user: User!
    token: String!
}

type RegisterAddressResponse {
    city: String!
    complement: String
    state: String!
    streetNumber: String!
    zone: String!
    streetName: String!
    id: String!
}

type GetProfileResponse {
    id: String!
    name: String!
    email: String!
    cpf: String!
    hasAddress: Boolean!
    address: String
}

type UserApiResponse {
    status: Int!
    data: UserResponse!
}

type RegisterAddressApiResponse {
    status: Int!
    data: RegisterAddressResponse!
}

type GetProfileApiResponse {
    status: Int!
    data: GetProfileResponse!
}

type Mutation {
    login(input: LoginInput): UserApiResponse!
    signup(input: SignupInput): UserApiResponse!
    registerAddress(input: RegisterAddressInput): RegisterAddressApiResponse!
}

type Query {
    getProfile(input: GetProfileInput): GetProfileApiResponse!
}
